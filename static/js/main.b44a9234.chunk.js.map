{"version":3,"sources":["components/CEPForm.jsx","components/CEPCtrl.jsx","App.js","serviceWorker.js","index.js"],"names":["CEPForm","state","cep","submitSearch","_this","props","searchCep","handleCepChange","_ref","target","setState","Object","defineProperty","name","value","react_default","a","createElement","this","Form_default","onSubmit","InputGroup_default","className","FormControl_default","type","placeholder","aria-label","aria-describedby","onChange","Append","Button_default","variant","Component","CEPCtrl","searching","setSearching","isSearching","cepToSearch","console","log","fetch","then","result","CEPForm_CEPForm","App","Tabs_default","defaultActiveKey","id","Tab_default","eventKey","title","CEPCtrl_CEPCtrl","disabled","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6XAMqBA,6MACjBC,MAAQ,CACJC,IAAO,MAGXC,aAAe,WACXC,EAAKC,MAAMC,UAAUF,EAAKH,MAAMC,QAGpCK,gBAAkB,SAAAC,GAAc,IAAZC,EAAYD,EAAZC,OAChBL,EAAKM,SAAS,SAACT,GACX,OAAOU,OAAAC,EAAA,EAAAD,CAAA,GAAEF,EAAOI,KAAOJ,EAAOK,kFAKlC,OACIC,EAAAC,EAAAC,cAAA,mBAAWC,KAAKjB,MAAMC,IAClBa,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAMI,SAAUF,KAAKf,cACjBY,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAYM,UAAU,QAClBP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CACIH,KAAK,MACLC,MAAOI,KAAKjB,MAAMC,IAClBsB,KAAK,OACLC,YAAY,MACZC,aAAW,MACXC,mBAAiB,MACjBC,SAAUV,KAAKX,kBAEnBQ,EAAAC,EAAAC,cAACI,EAAAL,EAAWa,OAAZ,KACId,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAQe,QAAQ,WAAhB,qBA9BSC,aCHhBC,6MAEjBhC,MAAQ,CACJiC,WAAa,KAGjBC,aAAe,SAACC,GACZhC,EAAKM,SAAS,SAACT,GACX,MAAO,CACHiC,UAAaE,QAKzB9B,UAAY,SAAC+B,GACTjC,EAAK+B,cAAa,GAClBG,QAAQC,IAAI,gBACZC,MAAM,4BAA8BH,EAAc,UAAUI,KAAK,SAAAC,GAC7DJ,QAAQC,IAAIG,KAEhBtC,EAAK+B,cAAa,4EAIlB,OACIpB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WACXP,EAAAC,EAAAC,cAAC0B,EAAD,CACIrC,UAAWY,KAAKZ,oBA3BC0B,aCmBtBY,MAbf,WACE,OACE7B,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAD,CAAM8B,iBAAiB,MAAMC,GAAG,gBAC9BhC,EAAAC,EAAAC,cAAC+B,EAAAhC,EAAD,CAAKiC,SAAS,MAAMC,MAAM,QACxBnC,EAAAC,EAAAC,cAACkC,EAAD,OAEFpC,EAAAC,EAAAC,cAAC+B,EAAAhC,EAAD,CAAKiC,SAAS,IAAIC,MAAM,IAAIE,UAAQ,OCJxBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.b44a9234.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button'\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\n\r\nexport default class CEPForm extends Component {\r\n    state = {\r\n        \"cep\": ''\r\n    }\r\n\r\n    submitSearch = () => {\r\n        this.props.searchCep(this.state.cep);\r\n    }\r\n\r\n    handleCepChange = ({target}) => {\r\n        this.setState((state) => {\r\n            return {[target.name]: target.value};\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div> CEP={this.state.cep}\r\n                <Form onSubmit={this.submitSearch}>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <FormControl\r\n                            name=\"cep\"\r\n                            value={this.state.cep}\r\n                            type=\"text\"\r\n                            placeholder=\"CEP\"\r\n                            aria-label=\"CEP\"\r\n                            aria-describedby=\"CEP\"\r\n                            onChange={this.handleCepChange}\r\n                        />\r\n                        <InputGroup.Append>\r\n                            <Button variant=\"primary\">Buscar</Button>\r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport CEPForm from './CEPForm';\r\n\r\nexport default class CEPCtrl extends Component {\r\n\r\n    state = {\r\n        \"searching\": false\r\n    }\r\n\r\n    setSearching = (isSearching) => {\r\n        this.setState((state) => {\r\n            return {\r\n                \"searching\": isSearching\r\n            };\r\n        });\r\n    }\r\n\r\n    searchCep = (cepToSearch) => {\r\n        this.setSearching(true);\r\n        console.log(\"searchingCep\");\r\n        fetch(\"https://viacep.com.br/ws/\" + cepToSearch + \"/json/\").then(result => {\r\n            console.log(result);\r\n        })\r\n        this.setSearching(false);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"CEPCtrl\">\r\n                <CEPForm\r\n                    searchCep={this.searchCep}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\n\nimport CEPCtrl from './components/CEPCtrl';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tabs defaultActiveKey=\"cep\" id=\"trabalhos-tf\">\n        <Tab eventKey=\"cep\" title=\"CEPs\">\n          <CEPCtrl />\n        </Tab>\n        <Tab eventKey=\"?\" title=\"?\" disabled />\n      </Tabs>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}